# Use this file and construct your own snakefile that successfully creates a workflow
# for this week's tasks. We have provided you a visual representation of what it should
# look like in the assigment. 
names=['ADrep1','ADrep2','P0rep1','P0rep2','P4rep1','P4rep2','P7rep1','P7rep2']

rule all:
	input:
		expand('results/{name}.exon.txt',name=names),
		'results/verse_concat_filtered.csv',
		'results/id2gene.txt',

rule verse:
	input:
		bam='results/{name}.bam',
		gtf = 'results/gencode.vM34.primary_assembly.annotation.gtf'
		
	output:
		verse_exons = 'results/{name}.exon.txt'
	params:
		prefix='results/{name}'
	shell:
		'''
		verse -S -a {input.gtf} -o {params.prefix} {input.bam}
		'''


rule concat_verse:
	input:
		mats = expand('results/{name}.exon.txt', name=names)
	output:
		concat = 'results/verse_concat.csv'
	shell:
		'''
		python concat_df.py -i {input.mats} -o {output.concat}
		'''


rule filter_cts:
	input:
		verse = 'results/verse_concat.csv'
	output:
		filtered = 'results/verse_concat_filtered.csv'
	shell:
		'''
		python filter_cts_mat.py -i {input.verse} -o {output.filtered}
		'''

rule txn_mapping:
	input:
		gtf = 'results/gencode.vM34.primary_assembly.annotation.gtf'
	output:
		mapping = 'results/id2gene.txt'
	shell:
		'''
		python parse_gtf.py -i {input.gtf} -o {output.mapping}
		'''

